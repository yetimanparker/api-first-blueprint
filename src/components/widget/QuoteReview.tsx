import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { Loader2, FileText, Send, Download } from 'lucide-react';
import { QuoteItem, CustomerInfo, WorkflowStep } from '@/types/widget';
import { GlobalSettings } from '@/hooks/useGlobalSettings';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { 
  applyGlobalMarkup, 
  applyGlobalTax, 
  formatExactPrice,
  calculateFinalPrice 
} from '@/lib/priceUtils';

interface QuoteReviewProps {
  quoteItems: QuoteItem[];
  customerInfo: Partial<CustomerInfo>;
  contractorId: string;
  settings: GlobalSettings;
  currentStep: WorkflowStep;
  onNext: () => void;
  onUpdateComments: (comments: string) => void;
}

const QuoteReview = ({ 
  quoteItems, 
  customerInfo, 
  contractorId, 
  settings, 
  currentStep,
  onNext,
  onUpdateComments 
}: QuoteReviewProps) => {
  const [projectComments, setProjectComments] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();

  const subtotal = quoteItems.reduce((sum, item) => sum + item.lineTotal, 0);
  const markupAmount = settings.global_markup_percentage > 0 
    ? applyGlobalMarkup(subtotal, settings.global_markup_percentage) - subtotal 
    : 0;
  const taxableAmount = subtotal + markupAmount;
  const taxAmount = settings.global_tax_rate > 0 
    ? applyGlobalTax(taxableAmount, settings.global_tax_rate) - taxableAmount 
    : 0;
  const total = calculateFinalPrice(subtotal, settings.global_markup_percentage, settings.global_tax_rate);

  const handleCommentsChange = (comments: string) => {
    setProjectComments(comments);
    onUpdateComments(comments);
  };

  const handleSubmitQuote = async () => {
    setIsSubmitting(true);
    
    try {
      // First create the customer record
      const customerData = {
        contractor_id: contractorId,
        first_name: customerInfo.firstName || '',
        last_name: customerInfo.lastName || '',
        email: customerInfo.email || '',
        phone: customerInfo.phone || null,
        address: customerInfo.address || null,
        city: customerInfo.city || null,
        state: customerInfo.state || null,
        zip_code: customerInfo.zipCode || null,
        status: 'lead',
        lead_source: 'widget'
      };

      const { data: customer, error: customerError } = await supabase
        .from('customers')
        .insert(customerData)
        .select()
        .single();

      if (customerError) throw customerError;

      // Create the quote record
      const quoteData = {
        contractor_id: contractorId,
        customer_id: customer.id,
        total_amount: total,
        status: 'draft',
        notes: projectComments || null,
        project_address: customerInfo.address || null,
        project_city: customerInfo.city || null,
        project_state: customerInfo.state || null,
        project_zip_code: customerInfo.zipCode || null,
        expires_at: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 days from now
        access_token: null // Will be generated by trigger if needed
      };

      const { data: quote, error: quoteError } = await supabase
        .from('quotes')
        .insert(quoteData)
        .select()
        .single();

      if (quoteError) throw quoteError;

      // Create quote items
      const quoteItemsData = quoteItems.map(item => ({
        quote_id: quote.id,
        product_id: item.productId,
        quantity: item.quantity,
        unit_price: item.unitPrice,
        line_total: item.lineTotal,
        notes: item.notes || null,
        measurement_data: {
          type: item.measurement.type,
          value: item.measurement.value,
          unit: item.measurement.unit,
          coordinates: item.measurement.coordinates || null,
          manualEntry: item.measurement.manualEntry || false,
          customName: item.customName,
          variations: item.variations || [],
          addons: item.addons || []
        }
      }));

      const { error: itemsError } = await supabase
        .from('quote_items')
        .insert(quoteItemsData);

      if (itemsError) throw itemsError;

      toast({
        title: "Quote Submitted Successfully!",
        description: `Quote #${quote.quote_number} has been created. You'll be contacted soon.`,
      });

      onNext(); // Move to confirmation step

    } catch (error) {
      console.error('Error submitting quote:', error);
      toast({
        title: "Submission Failed",
        description: "There was an error submitting your quote. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  if (currentStep === 'project-comments') {
    return (
      <Card className="max-w-4xl mx-auto">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileText className="h-5 w-5 text-primary" />
            Project Comments
          </CardTitle>
          <p className="text-sm text-muted-foreground">
            Add any additional details about your project (optional)
          </p>
        </CardHeader>
        
        <CardContent className="space-y-6">
          <div>
            <Label htmlFor="projectComments">Additional Project Details</Label>
            <Textarea
              id="projectComments"
              value={projectComments}
              onChange={(e) => handleCommentsChange(e.target.value)}
              placeholder="Tell us more about your project requirements, preferences, timeline, or any other details that would help us provide the best service..."
              rows={6}
            />
            <p className="text-xs text-muted-foreground mt-2">
              This information helps us better understand your needs and provide accurate service.
            </p>
          </div>

          <div className="flex flex-col sm:flex-row gap-4">
            <Button onClick={onNext} className="flex-1" size="lg">
              Continue to Quote Review
            </Button>
            <Button 
              onClick={onNext} 
              variant="outline" 
              className="flex-1"
            >
              Skip Comments
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="max-w-4xl mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <FileText className="h-5 w-5 text-primary" />
          Quote Summary
        </CardTitle>
        <p className="text-sm text-muted-foreground">
          Review your quote details before submission
        </p>
      </CardHeader>
      
      <CardContent className="space-y-6">
        {/* Customer Information */}
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-lg">Contact Information</CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            <p><strong>Name:</strong> {customerInfo.firstName} {customerInfo.lastName}</p>
            {customerInfo.email && <p><strong>Email:</strong> {customerInfo.email}</p>}
            {customerInfo.phone && <p><strong>Phone:</strong> {customerInfo.phone}</p>}
            {customerInfo.address && (
              <p><strong>Address:</strong> {customerInfo.address}
                {customerInfo.city && `, ${customerInfo.city}`}
                {customerInfo.state && `, ${customerInfo.state}`}
                {customerInfo.zipCode && ` ${customerInfo.zipCode}`}
              </p>
            )}
          </CardContent>
        </Card>

        {/* Quote Items */}
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-lg">Quote Items</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {quoteItems.map((item, index) => (
              <div key={item.id} className="border rounded-lg p-4">
                <div className="flex items-start justify-between mb-2">
                  <div className="flex-1">
                    <h4 className="font-semibold">{item.customName || item.productName}</h4>
                    <div className="flex items-center gap-2 mt-1">
                      <Badge variant="outline" className="text-xs">
                        {item.measurement.value.toLocaleString()} {item.measurement.unit.replace('_', ' ')}
                      </Badge>
                      {item.measurement.manualEntry && (
                        <Badge variant="secondary" className="text-xs">Manual Entry</Badge>
                      )}
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="font-semibold">
                      {formatExactPrice(item.lineTotal, {
                        currency_symbol: settings.currency_symbol,
                        decimal_precision: settings.decimal_precision
                      })}
                    </p>
                    <p className="text-sm text-muted-foreground">
                      {formatExactPrice(item.unitPrice, {
                        currency_symbol: settings.currency_symbol,
                        decimal_precision: settings.decimal_precision
                      })} per unit
                    </p>
                  </div>
                </div>

                {/* Variations */}
                {item.variations && item.variations.length > 0 && (
                  <div className="mt-2">
                    <p className="text-sm font-medium text-muted-foreground">Variations:</p>
                    <ul className="text-sm text-muted-foreground">
                      {item.variations.map((variation, idx) => (
                        <li key={idx}>• {variation.name}</li>
                      ))}
                    </ul>
                  </div>
                )}

                {/* Add-ons */}
                {item.addons && item.addons.length > 0 && (
                  <div className="mt-2">
                    <p className="text-sm font-medium text-muted-foreground">Add-ons:</p>
                    <ul className="text-sm text-muted-foreground">
                      {item.addons.map((addon, idx) => (
                        <li key={idx}>• {addon.name} (Qty: {addon.quantity})</li>
                      ))}
                    </ul>
                  </div>
                )}

                {/* Notes */}
                {item.notes && (
                  <div className="mt-2">
                    <p className="text-sm font-medium text-muted-foreground">Notes:</p>
                    <p className="text-sm text-muted-foreground">{item.notes}</p>
                  </div>
                )}
              </div>
            ))}
          </CardContent>
        </Card>

        {/* Project Comments */}
        {projectComments && (
          <Card>
            <CardHeader className="pb-3">
              <CardTitle className="text-lg">Project Comments</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm">{projectComments}</p>
            </CardContent>
          </Card>
        )}

        {/* Price Breakdown */}
        <Card className="bg-primary/5 border-primary/20">
          <CardHeader className="pb-3">
            <CardTitle className="text-lg">Price Summary</CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            <div className="flex justify-between">
              <span>Subtotal:</span>
              <span>
                {formatExactPrice(subtotal, {
                  currency_symbol: settings.currency_symbol,
                  decimal_precision: settings.decimal_precision
                })}
              </span>
            </div>
            
            {markupAmount > 0 && (
              <div className="flex justify-between text-muted-foreground">
                <span>Markup ({settings.global_markup_percentage}%):</span>
                <span>
                  {formatExactPrice(markupAmount, {
                    currency_symbol: settings.currency_symbol,
                    decimal_precision: settings.decimal_precision
                  })}
                </span>
              </div>
            )}
            
            {taxAmount > 0 && (
              <div className="flex justify-between text-muted-foreground">
                <span>Tax ({settings.global_tax_rate}%):</span>
                <span>
                  {formatExactPrice(taxAmount, {
                    currency_symbol: settings.currency_symbol,
                    decimal_precision: settings.decimal_precision
                  })}
                </span>
              </div>
            )}
            
            <Separator />
            
            <div className="flex justify-between text-lg font-bold">
              <span>Total:</span>
              <span className="text-primary">
                {formatExactPrice(total, {
                  currency_symbol: settings.currency_symbol,
                  decimal_precision: settings.decimal_precision
                })}
              </span>
            </div>
          </CardContent>
        </Card>

        {/* Submit Button */}
        <Button 
          onClick={handleSubmitQuote} 
          disabled={isSubmitting}
          className="w-full"
          size="lg"
        >
          {isSubmitting ? (
            <>
              <Loader2 className="h-4 w-4 animate-spin mr-2" />
              Submitting Quote...
            </>
          ) : (
            <>
              <Send className="h-4 w-4 mr-2" />
              Submit Quote Request
            </>
          )}
        </Button>

        <div className="text-center text-sm text-muted-foreground">
          By submitting this quote request, you agree to be contacted about your project.
          <br />
          This is an estimate and final pricing may vary based on site conditions.
        </div>
      </CardContent>
    </Card>
  );
};

export default QuoteReview;